function [ neurogram_pair ] = neurogram_processing( neurogram, metric_type, parameters )

% This script-file generates the envelope (ENV) and time fine-structure (TFS)
% neurograms associated with a given post-stimulus time histogram (PSTH) response
% generated by the cat auditory periphery model.
%
%
% Author:  Michael R. Wirtzfeld ( michael.wirtzfeld [at] gmail.com )
% Creation Date:  Tuesday, June 25, 2012
% Modification Date:  Friday, May 24, 2013
%       Change Digest:  See below.
%
%% See Also
% 


PSTH_time_indices = neurogram.PSTH_time_indices;


switch ( metric_type )
    
    case 'nsim'  % Rebinning with Hamming Window Processing
        
        PSTH_response = neurogram.PSTH_subset;
        
        neurogram_pair.windowing = 'Hamming';        
        
        % Rebinning - Mean Rate
        [ Hpsth_smooth_rebinning, psthT_smooth_rebinning ] = smoothNG( PSTH_response, PSTH_time_indices, ...
            parameters.model.sample_frequency, parameters.neurogram_processing.envelope_time_window);
        
        % Windowing - Mean Rate
        [ PSTH_hamming, PSTH_time_indices_hamming ] = hamming_window_processing( ...
            Hpsth_smooth_rebinning, psthT_smooth_rebinning, ...
            parameters.model.sample_frequency, ...
            parameters.neurogram_processing.envelope_samples, ...
            parameters.neurogram_processing.fractional_window_overlap, ...
            parameters.model.number_of_realizations, ...
            parameters.nsim_processing.scaling_raw_sps_nsim );
        
        neurogram_pair.nsim_env.PSTH = PSTH_hamming;
        neurogram_pair.nsim_env.PSTH_time_indices = PSTH_time_indices_hamming;
        
%         [psth_convolution, psth_time_convolution] = smoothNG( PSTH_response, PSTH_time_indices, ...
%             parameters.model.sample_frequency, parameters.neurogram_processing.envelope_time_window, hamming(128));
% 
%         fprintf(1, '\n\nBlock:\t\t\t%4.2f,  Size:  %d by %d  (Length Time:  %d)', max(max(PSTH_hamming)), ...
%             size(PSTH_hamming, 1), size(PSTH_hamming, 2), numel(PSTH_time_indices_hamming));
%         fprintf(1, '\nConvolution:\t%4.2f,  Size:  %d by %d  (Length Time:  %d)', max(max(psth_convolution)), ...
%             size(psth_convolution, 1), size(psth_convolution, 2), numel(psth_time_convolution));
        
        
        % Rebinning - Spike Rate
        [ Hpsth_smooth_rebinning, psthT_smooth_rebinning ] = smoothNG( PSTH_response, PSTH_time_indices, ...
            parameters.model.sample_frequency, parameters.neurogram_processing.tfs_time_window);
        
        % Windowing - Spike Rate
        [ PSTH_hamming, PSTH_time_indices_hamming ] = hamming_window_processing( ...
            Hpsth_smooth_rebinning, psthT_smooth_rebinning, ...
            parameters.model.sample_frequency, ...
            parameters.neurogram_processing.tfs_samples, ...
            parameters.neurogram_processing.fractional_window_overlap, ...
            parameters.model.number_of_realizations, ...
            parameters.nsim_processing.scaling_raw_sps_nsim );
        
        neurogram_pair.nsim_tfs.PSTH = PSTH_hamming;
        neurogram_pair.nsim_tfs.PSTH_time_indices = PSTH_time_indices_hamming;
        
%         [psth_convolution, psth_time_convolution] = smoothNG( PSTH_response, PSTH_time_indices, ...
%             parameters.model.sample_frequency, parameters.neurogram_processing.tfs_time_window, hamming(32));
% 
%         fprintf(1, '\n\nBlock:\t\t\t%4.2f,  Size:  %d by %d  (Length Time:  %d)', max(max(PSTH_hamming)), ...
%             size(PSTH_hamming, 1), size(PSTH_hamming, 2), numel(PSTH_time_indices_hamming));
%         fprintf(1, '\nConvolution:\t%4.2f,  Size:  %d by %d  (Length Time:  %d)', max(max(psth_convolution)), ...
%             size(psth_convolution, 1), size(psth_convolution, 2), numel(psth_time_convolution));
        
        
    case 'stmi'  % Rectangular Window Processing
        
        PSTH_response = neurogram.PSTH;
        
        neurogram_pair.windowing = 'Rectangular';
        
        % Rebinning
        [ Hpsth_smooth_rebinning, psthT_smooth_rebinning ] = smoothNG( PSTH_response, PSTH_time_indices, ...
            parameters.model.sample_frequency, (1/parameters.model.sample_frequency));
        
        % Windowing
        [ PSTH_rectangular, PSTH_time_indices_rectangular ] = rectangular_window_processing( ...
            Hpsth_smooth_rebinning, psthT_smooth_rebinning, parameters.model.sample_frequency, ...
            parameters.neurogram_processing.stmi_time_window * parameters.model.sample_frequency, ...
            parameters.neurogram_processing.fractional_window_overlap, ...
            parameters.model.number_of_realizations );
        
        neurogram_pair.stmi.PSTH = PSTH_rectangular;
        neurogram_pair.stmi.PSTH_time_indices = PSTH_time_indices_rectangular;
    
    
    otherwise
      error( '*** Invalid Window-type ***' );
      
end;



%% References



%% Digest

% Friday, May 24, 2013 (prior revision 1308)
%   -Modify call to "hamming_window_processing.m" to include number of
%       realizations and NSIM raw spike count or spikes-per-second
%       logical-flag.

% Friday, December 28, 2012
%   -Remove reference to "parameters.model.CF_flag" field.

% Thursday, December 27, 2012
%   -Update characteristic frequency field-name in the model parameter
%       structure.

% Friday, December 21, 2012
%   -Review and tidy script-file.

% Wednesday, October 17, 2012
%   -Add flag to control scaling of PSTH to spikes per second.

% Monday, August 27, 2012
%   -Calculate single STMI metric value.

% Wednesday, August 22, 2012
%   -Review of script-file.

% Saturday, July 28, 2012
%   -Incorporate code to handle both NSIM and STMI characterisitic
%   frequency sets and respective neurogram processing.


